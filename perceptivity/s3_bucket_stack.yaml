AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This is a template that will be used as a nested stack of S3 buckets.
Parameters:
  bucketName:
    Description: this will be the name of the bucket
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "[a-z-]+"
  allPrivateAccess:
    Description: a boolean that states whether your bucket is public or private
    Type: String
    AllowedValues: [True, False]
Resources:
  myS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      #AccelerateConfiguration:
        #AccelerateConfiguration
      #AccessControl: String
      #AnalyticsConfigurations:
        #- AnalyticsConfiguration
      #BucketEncryption:
        #BucketEncryption
      BucketName: !Ref bucketName
      #CorsConfiguration:
        #CorsConfiguration
      #IntelligentTieringConfigurations:
        #- IntelligentTieringConfiguration
      #InventoryConfigurations:
        #- InventoryConfiguration
      #LifecycleConfiguration:
        #LifecycleConfiguration
      #LoggingConfiguration:
        #DestinationBucketName: !Ref myS3Bucket
        #LogFilePrefix: "log-files"
      #MetricsConfigurations:
        #- MetricsConfiguration
      #NotificationConfiguration:
        #NotificationConfiguration
      #ObjectLockConfiguration:
        #ObjectLockConfiguration
      #ObjectLockEnabled: Boolean
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: !Ref allPrivateAccess
        BlockPublicPolicy: !Ref allPrivateAccess
        IgnorePublicAcls: !Ref allPrivateAccess
        RestrictPublicBuckets: !Ref allPrivateAccess
      #ReplicationConfiguration: may be useful, keep this in mind
        #ReplicationConfiguration
      Tags:
        - Key: bucketName
          Value: !Ref bucketName
      #VersioningConfiguration: Might be good for the cog logs
        #VersioningConfiguration
      #WebsiteConfiguration: may be useful for the decision tree, jupyter notebook scenario
        #WebsiteConfiguration
  cloudTrailBucketPolicy:

    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref myS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: '1'
            Effect: Allow
            Principal:
              Service: logs.us-east-1.amazonaws.com
            Action: 's3:GetBucketAcl'
            Resource: !GetAtt
              - myS3Bucket
              - Arn
          - Sid: '2'
            Effect: Allow
            Principal:
              Service: logs.us-east-1.amazonaws.com
            Action: 's3:PutObject'
            #Resource: 'arn:aws:s3:::bear-cognition-logs/*'
            Resource: !Join
              - ""
              - - !GetAtt
                  - myS3Bucket
                  - Arn
                - "/*"
            Condition:
              StringEquals:
                's3:x-amz-acl': bucket-owner-full-control
          - Sid: AWSLogDeliveryWrite
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action: 's3:PutObject'
            Resource: !Join
              - ""
              - - !GetAtt
                  - myS3Bucket
                  - Arn
                - "/*"
            Condition:
              StringEquals:
                's3:x-amz-acl': bucket-owner-full-control
          - Sid: AWSLogDeliveryAclCheck
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action: 's3:GetBucketAcl'
            Resource: !GetAtt
              - myS3Bucket
              - Arn
          - Sid: AWSCloudTrailAclCheck20150319
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 's3:GetBucketAcl'
            Resource: !GetAtt
              - myS3Bucket
              - Arn
          - Sid: AWSCloudTrailWrite20150319
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 's3:PutObject'
            Resource: !Join
              - ""
              - - !GetAtt
                  - myS3Bucket
                  - Arn
                - "/*"
            Condition:
              StringEquals:
                's3:x-amz-acl': bucket-owner-full-control

Outputs:
  bucketLocation:
    Description: the name of the S3 bucket for reference
    Value: !Ref myS3Bucket
    Export:
      #Name: !Sub 'arn:aws:cloudformation:us-east-1:708508995810:stack/lkjsdlkj-bearNetworkStack-TJL3Q47YZ2ND/d9c2ead0-1a18-11ec-810d-12311be6f10f-PortalSubnetID'
      Name:
        'Fn::Transform':
          - Name: 'String'
            Parameters:
              InputString: !Sub '${AWS::StackId}-bucketLocation'
              Operation: Replace
              Old: "/"
              New: ""

  bucketArn:
    Description: the ARN of the s3 bucket
    Value: !Join
      - ''
      - - !GetAtt
          - myS3Bucket
          - Arn
        - "/"
    Export:
      #Name: !Sub 'arn:aws:cloudformation:us-east-1:708508995810:stack/lkjsdlkj-bearNetworkStack-TJL3Q47YZ2ND/d9c2ead0-1a18-11ec-810d-12311be6f10f-PortalSubnetID'
      Name:
        'Fn::Transform':
          - Name: 'String'
            Parameters:
              InputString: !Sub '${AWS::StackId}-bucketArn'
              Operation: Replace
              Old: "/"
              New: ""