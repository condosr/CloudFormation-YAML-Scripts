


    serverVolAttatchEIP:
      Type: AWS::EC2::EIP
      Condition: hasVolumes
      Properties:
        Domain: standard
        InstanceId: !Ref serverVolAttatch

    serverNoVolAttatchEIP:
      Type: AWS::EC2::EIP
      Condition: noVolumes
      Properties:
        Domain: standard
        InstanceId: !Ref serverNoVolAttatch


    ServerBear:
      Type: AWS::EC2::Instance
      Condition: "noVolumes"
      Properties:
        AdditionalInfo: practice ec2
        #Affinity: String
        AvailabilityZone: !ImportValue
          'Fn::Sub': '${networkStackName}-PortalTableauSubnetAZ'
          #BlockDeviceMappings: ( may need this in case a user wishes to make a blank device and attatch it)
          #- DeviceName: /dev/sda1
          #NoDevice: {}
          #CpuOptions:
          #CoreCount: 1 #ref server
          #ThreadsPerCore: 1 #ref server
          #CreditSpecification:
          #CreditSpecification
        DisableApiTermination: False
          #EbsOptimized: Boolean
          #ElasticGpuSpecifications:
          #- ElasticGpuSpecification
          #ElasticInferenceAccelerators:
          #- ElasticInferenceAccelerator
        #EnclaveOptions:
        #EnclaveOptions
        #HibernationOptions: This is interesting
        #HibernationOptions
        #HostId: String
        #HostResourceGroupArn: String
        IamInstanceProfile: cloudWatchAgentUser
        ImageId: 'ami-08e08d7ff2687cede'
        #InstanceInitiatedShutdownBehavior: String
        InstanceType: t2.micro
        #Ipv6AddressCount: Integer
        #Ipv6Addresses:
        #- InstanceIpv6Address
        #KernelId: String
        KeyName: practiceVolumeExperiment
          #LaunchTemplate:
          #LaunchTemplateSpecification
          #LicenseSpecifications:
        #- LicenseSpecification
        #Monitoring: Boolean
        #NetworkInterfaces: !ImportValue
        #'Fn::Sub': '${networkStackName}-VPCID'
        #PlacementGroupName: String
        #PrivateIpAddress: String
        #RamdiskId: String
        SecurityGroupIds:
          - !ImportValue
            'Fn::Sub': '${networkStackName}-TableauSecurityGroupID'
          #SecurityGroups:
          #- String
          #SourceDestCheck: Boolean
          #SsmAssociations:
          #- SsmAssociation
        SubnetId: !ImportValue
          'Fn::Sub': '${networkStackName}-PortalSubnetID'
        #Tenancy: String
        #UserData: String to do later